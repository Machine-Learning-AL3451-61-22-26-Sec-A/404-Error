import pandas as pd

# Load the dataset
msg = pd.read_csv('/content/document.csv', names=['message', 'label'])
print('The dimensions of the dataset', msg.shape)

# Mapping labels to numerical values
msg['labelnum'] = msg.label.map({'pos': 1, 'neg': 0})
X = msg.message
y = msg.labelnum

# Splitting the dataset into train and test data
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(X, y)
print(xtest.shape)
print(xtrain.shape)
print(ytest.shape)
print(ytrain.shape)

# Using CountVectorizer to convert text into feature vectors
from sklearn.feature_extraction.text import CountVectorizer
count_vect = CountVectorizer()
xtrain_dtm = count_vect.fit_transform(xtrain)
xtest_dtm = count_vect.transform(xtest)

# Training Naive Bayes (NB) classifier on training data
from sklearn.naive_bayes import MultinomialNB
clf = MultinomialNB().fit(xtrain_dtm, ytrain)
predicted = clf.predict(xtest_dtm)

# Printing accuracy metrics
from sklearn import metrics
print('Accuracy metrics')
print('Accuracy of the classifier is', metrics.accuracy_score(ytest, predicted))
print('Confusion matrix')
print(metrics.confusion_matrix(ytest, predicted))
print('Recall and Precision')
print(metrics.recall_score(ytest, predicted))
print(metrics.precision_score(ytest, predicted))

# New data prediction example
docs_new = ['I like this place', 'My boss is not my saviour']
X_new_counts = count_vect.transform(docs_new)
predicted_new = clf.predict(X_new_counts)
for doc, category in zip(docs_new, predicted_new):
    print('%r => %s' % (doc, category))
